#!/usr/bin/env python
#
# Command-line access to the base implementation of git-it.
#
import sys, os
import getopt

# Point Python to the lib directory to include libraries
sys.path += [ os.path.abspath(sys.path[0] + '/..') + '/lib' ]
import gitit
import log

def usage():
  print 'usage: it <subcommand> [<options>]'
  print ''
  print 'Valid subcommands are:'
  print '  init      Initializes an area for storing issues.'
  print '  list      Shows a list of all issues.'
  print '  show      Shows details of a specific issue.'
  print '  new       Adds a new issue.'
  print '  edit      Edits an existing issue.'
  print '  rm -f     Removes an existing ticket.'
  print '  mv        Moves the given ticket to a release.'
  print '  sync      Retrieves all remote ticket changes.'
  print ''
  print 'Taking responsibility:'
  print '  take      Take responsibility for this ticket and put it'
  print '            in your INBOX (i.e. assign it to yourself).'
  print '  leave     Let go responsibility for this ticket and remove'
  print '            it from your INBOX.'
  print ''
  print 'Changing status:'
  print '  test      Mark a ticket as to-test.'
  print '  close     Mark a ticket as closed.'
  print '  fix       Mark a ticket as fixed.'
  print '  reject    Mark a ticket as rejected.'
  print '  reopen    Reopens an issue.'

# Parse input options
opts = []
params = []
try:
  shorts = 'h'
  longs  = [ ]
  opts, params = getopt.getopt(sys.argv[1:], shorts, longs)
except getopt.GetoptError, e:
  log.printerr(e)
  usage()
  sys.exit(1)

# Set variables according to input options
for key, val in opts:
  if key in [ '-h' ]:
    usage()
    sys.exit(0)

# No subcommand?
if len(params) == 0:
  log.printerr('No subcommand specified.')
  usage()
  sys.exit(1)

# Valid subcommand?
subcmd = params[0]
del params[0]
if not subcmd in [ 'init', 'list', 'show', 'new', 'edit', 'mv', 'rm', 'reopen', 'close', 'fix', 'reject', 'test', 'take', 'leave', 'sync' ]:
  log.printerr('Unknown subcommand \'%s\'.' % subcmd)
  usage()
  sys.exit(1)

# Main logic
g = gitit.Gitit()
if subcmd == 'init':
  g.init()
elif subcmd == 'new':
  g.new()
elif subcmd == 'list':
  types = ['open', 'test']
  if len(params) > 0:
    if params[0] == '-a':
      types += [ 'closed', 'fixed', 'rejected' ]
      del params[0]
  releases = []
  if len(params) > 0:
    releases += params
  g.list(types, releases)
elif subcmd == 'edit':
  if len(params) != 1:
    log.printerr('usage: it edit <id>')
    sys.exit(1)
  g.edit(params[0])
elif subcmd == 'show':
  if len(params) != 1:
    log.printerr('usage: it show <id>')
    sys.exit(1)
  g.show(params[0])
elif subcmd == 'mv':
  if len(params) != 2:
    log.printerr('usage: it mv <id> <release>')
    sys.exit(1)
  g.mv(params[0], params[1])
elif subcmd == 'rm':
  if len(params) != 2 or params[0] != '-f':
    log.printerr('tickets can be closed with either of the following subcommands:')
    log.printerr('  fix')
    log.printerr('  reject')
    log.printerr('  close')
    log.printerr('')
    log.printerr('to permanently remove a ticket instead of closing it, use:')
    log.printerr('  it rm -f <id>')
    sys.exit(1)
  g.rm(params[1])
elif subcmd == 'close':
  if len(params) != 1:
    log.printerr('usage: it close <id>')
    sys.exit(1)
  g.finish_ticket(params[0], 'closed')
elif subcmd == 'fix':
  if len(params) != 1:
    log.printerr('usage: it fix <id>')
    sys.exit(1)
  g.finish_ticket(params[0], 'fixed')
elif subcmd == 'reject':
  if len(params) != 1:
    log.printerr('usage: it close <id>')
    sys.exit(1)
  g.finish_ticket(params[0], 'rejected')
elif subcmd == 'test':
  if len(params) != 1:
    log.printerr('usage: it test <id>')
    sys.exit(1)
  g.finish_ticket(params[0], 'test')
elif subcmd == 'reopen':
  if len(params) != 1:
    log.printerr('usage: it reopen <id>')
    sys.exit(1)
  g.reopen_ticket(params[0])
elif subcmd == 'take':
  if len(params) != 1:
    log.printerr('usage: it take <id>')
    sys.exit(1)
  g.take_ticket(params[0])
elif subcmd == 'leave':
  if len(params) != 1:
    log.printerr('usage: it leave <id>')
    sys.exit(1)
  g.leave_ticket(params[0])
elif subcmd == 'sync':
  g.sync()

